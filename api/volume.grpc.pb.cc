// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: volume.proto

#include "volume.pb.h"
#include "volume.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace volume {

static const char* VolumeVehicle_method_names[] = {
  "/volume.VolumeVehicle/SayHello",
};

std::unique_ptr< VolumeVehicle::Stub> VolumeVehicle::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< VolumeVehicle::Stub> stub(new VolumeVehicle::Stub(channel));
  return stub;
}

VolumeVehicle::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SayHello_(VolumeVehicle_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::volume::HelloReply>* VolumeVehicle::Stub::SayHelloRaw(::grpc::ClientContext* context, const ::volume::HelloRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::volume::HelloReply>::Create(channel_.get(), rpcmethod_SayHello_, context, request);
}

::grpc::ClientAsyncReader< ::volume::HelloReply>* VolumeVehicle::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::volume::HelloRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::volume::HelloReply>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::volume::HelloReply>* VolumeVehicle::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::volume::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::volume::HelloReply>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, false, nullptr);
}

VolumeVehicle::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      VolumeVehicle_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< VolumeVehicle::Service, ::volume::HelloRequest, ::volume::HelloReply>(
          std::mem_fn(&VolumeVehicle::Service::SayHello), this)));
}

VolumeVehicle::Service::~Service() {
}

::grpc::Status VolumeVehicle::Service::SayHello(::grpc::ServerContext* context, const ::volume::HelloRequest* request, ::grpc::ServerWriter< ::volume::HelloReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace volume

